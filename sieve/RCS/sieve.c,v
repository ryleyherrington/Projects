head	1.11;
access;
symbols;
locks
	ryleyherrington:1.11; strict;
comment	@ * @;


1.11
date	2012.02.21.05.28.24;	author ryleyherrington;	state Exp;
branches;
next	1.10;

1.10
date	2012.02.21.05.23.38;	author ryleyherrington;	state Exp;
branches;
next	1.9;

1.9
date	2012.02.21.01.34.41;	author ryleyherrington;	state Exp;
branches;
next	1.8;

1.8
date	2012.02.21.01.22.49;	author ryleyherrington;	state Exp;
branches;
next	1.7;

1.7
date	2012.02.21.01.15.21;	author ryleyherrington;	state Exp;
branches;
next	1.6;

1.6
date	2012.02.12.09.01.48;	author ryleyherrington;	state Exp;
branches;
next	1.5;

1.5
date	2012.02.12.08.25.36;	author ryleyherrington;	state Exp;
branches;
next	1.4;

1.4
date	2012.02.12.05.18.46;	author ryleyherrington;	state Exp;
branches;
next	1.3;

1.3
date	2012.02.12.04.50.33;	author ryleyherrington;	state Exp;
branches;
next	1.2;

1.2
date	2012.02.12.04.44.10;	author ryleyherrington;	state Exp;
branches;
next	1.1;

1.1
date	2012.02.12.04.18.17;	author ryleyherrington;	state Exp;
branches;
next	;


desc
@Initial rev
@


1.11
log
@added mutex init and destory.
..
@
text
@
/*
 *  sieve - generate all prime number less than "N"
 *
 *  To reduce memory contention, rather than have multiple threads
 *  mark a particular value for the entire length of the sieve,
 *  this implementation makes each thread responsible for a
 *  a fraction (1/nthreads) of the sieve.
 *
 *  To reduce DTLB and cache misses, this version uses a compressed
 *  compressed bitmap for the main sieve data structure.  Each value
 *  is represented by a single bit, and even numbers are skipped, so
 *  each byte records 16 values.  0 means "prime", 1 means not prime.
 *
 *  Because any given byte in this sieve is "owned" by one
 *  thread, there is no chance for contention and the data does
 *  not have to be locked.
 */

#include <inttypes.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <math.h>
#include <limits.h>
#include <assert.h>
#include <pthread.h>

#include <vector>

typedef unsigned long u_val_t;
typedef unsigned char ubyte_t;

/**********************************************************
 * Functional replacement for calloc()
 **********************************************************
 */
ubyte_t* zmalloc(size_t size) {
    ubyte_t* retval = (ubyte_t*)malloc(size);
    if (retval == NULL)
        perror("malloc"), exit(-1);
    memset(retval, 0, size);
    return retval;
}


/**********************************************************
 * "master" sieve data
 *
 * This will be a comparatively small set of primes used
 * to sieve the full set we are searching for.  This will
 * be "pre-computed" by the main thread and then read by
 * each worker thread.
 *
 * Note that for a 4 billion element sieve, this will only
 * contain 64K elements and takes less than a second to build.
 **********************************************************
 */

// Limit of numbers we are searching for primes (for example, 4B
u_val_t max_prime = 0;

// "master" sieve data for sqrt(max_prime) elements
u_val_t max_master_prime = 0;
ubyte_t *master_map = NULL;

u_val_t set_up_master_map() {
    u_val_t max = (u_val_t)sqrt((double)max_prime);
    if (max * max < max_prime)
        max++;

    master_map = zmalloc(max/2 + 1);

    for (int i=3; i<max; i+=2) {
        if (master_map[(i-1)/2] == 0) { //if i is prime...
            u_val_t incr = i+i;
            for (u_val_t j=i+incr; j<max; j+=incr)
                master_map[(j-1)/2] = 1;
        }
    }
    return max;
}

/**********************************************************
 * "sieve" data ("max_prime" elements)
 **********************************************************
 */
   
// Each thread will be responsible for range [low_bound .. high_bound)
struct chunk_data {
    u_val_t low_bound;
    u_val_t high_bound;
};


// Array of "max_prime/16" bytes to represent "max_prime" values.
ubyte_t *bitmask = 0;

pthread_mutex_t lock = {0};
u_val_t last_value = 0; 
u_val_t chunk_size = 0; 

bool next_chunk(chunk_data *chunk_bounds) {
    
    bool retval = true;

    pthread_mutex_lock(&lock);
    if (last_value >= max_prime)
         retval = false; 
    else {
        chunk_bounds->low_bound  = last_value;
        chunk_bounds->high_bound = last_value + chunk_size;
        if (chunk_bounds->high_bound > max_prime)
            chunk_bounds->high_bound = max_prime;
        last_value = chunk_bounds->high_bound; 
    }
    pthread_mutex_unlock(&lock);
    
    return retval;
}


// Generate next prime by iterating through odds and avoiding
// any number which has been identified as non-prime.
u_val_t next_prime(u_val_t curr_prime) {
    assert((curr_prime & 0x01) == 1);
    while (curr_prime < max_master_prime) {
        curr_prime += 2;
        if (master_map[(curr_prime-1)/2] == 0)//if curr_prime is a prime number
            return curr_prime;
    }
    return 0;
}

u_val_t byte_pos(u_val_t v) { return (v/16);     }  // v>>4
int     bit_pos(u_val_t v)  { return (v%16)/2;   }  // (v&0x0F) >> 1

// Some compilers insist on a "C" prototype for this arg to pthread_create()
extern "C" void* do_sieve(void*);

/*
 * do_sieve() - Mark all non-primes within range [low_bound .. high_bound)
 */
void *do_sieve(void*v) {
    struct chunk_data data;
    
    while (next_chunk(&data) == true) {

        u_val_t curr_prime = 1;
        while ( (curr_prime=next_prime(curr_prime)) != 0) {
    
            // Find multiple of "curr_prime" within this thread's range
            u_val_t lo  = (data.low_bound/curr_prime) * curr_prime;
            if (lo < data.low_bound)   // make sure we're within the legal range
                lo += curr_prime;
            if ((lo & 0x01) == 0)       // make sure we're starting on an odd value
                lo += curr_prime;
            u_val_t incr = curr_prime + curr_prime;
    
            if (lo == curr_prime)       // only mark multiples - not the original
                lo += incr;
            while (lo < data.high_bound) {
                u_val_t byte_index = byte_pos(lo);
                assert(bit_pos(lo) < 8);
                bitmask[byte_index] |= (1 << bit_pos(lo));
                // fprintf(stderr, "thr=%d prime = %4lu, cross out %lu, byte_index = %lu  bit_index = %d  bit_mask = 0x%02x  byte_value = 0x%02x\n",
                // data.thread_num, curr_prime, lo, byte_index, bit_pos(lo), 1<<bit_pos(lo), (ubyte_t)bitmask[byte_index]);
                lo += incr;
            }
        }
    }
    return 0;
}

int main(int argc, char* argv[]) {
    time_t start = time(0);
    if (argc>1 && strcmp(argv[1],"--help") == 0) {
        printf("usage: %s [num_threads [max_prime [chunk_size]]]\n", argv[0]);
        exit(-1);
    }
    int numthr   = argc>1 ? atoi(argv[1]) : 4;//sysconf 
    max_prime    = argc>2 ? strtoul(argv[2], NULL, 10) : 4294967295UL;
    chunk_size   = argc>3 ? strtoul(argv[3], NULL, 10) : 50000000;
    bool doprint = argc<=4;//can compare if you choose to

    if (chunk_size < 16) {
        fprintf(stderr, "chunk size is too small\n");
        exit(-1);
    }
    chunk_size &= ~0xF;

    pthread_attr_t attr;
    /* initialize thread attribute with defaults */
    pthread_attr_init(&attr);

    pthread_mutex_init(&lock, NULL);

    // Set up the "master" map which controls the full-size sieve
    max_master_prime = set_up_master_map();
    //this checks if it's odd or even basically
    //if the upper bound is even, we're just backing up by one because 
    //no even number will be prime
    if ((max_prime & 0x1) == 0)  // avoids overflow on a 32-bit system
        max_prime--;

    // Each thread must handle a multple of 16 (since 16 elements per byte)
    bitmask = zmalloc(max_prime/16 + 1);

    // Create a thread to handle each subsection of the bitmap
    std::vector<pthread_t> tid(numthr);
    for (int i=0; i<numthr; i++)
        pthread_create(&tid[i], &attr, do_sieve, NULL);
    for (int i=0; i<numthr; i++)
        pthread_join(tid[i], NULL);
    pthread_mutex_destroy(&lock);
    time_t stop = time(0);
    fprintf(stderr, "Time to do everything except print = %lu seconds\n", (u_val_t)(stop-start));

    // Iterate through the bitmap to print out the primes
    if (doprint) {
        printf("2\n");
        for (u_val_t i=3; i<max_prime; i+=2) {
            if ( (bitmask[byte_pos(i)] & (1<<bit_pos(i))) == 0)
                printf("%lu\n", i);
        }
    }
    return 0;
}
@


1.10
log
@working, fast, chunking is right, mutex lock is correct.
@
text
@a191 4
    // DEBUG
    //fprintf(stderr, "numthr=%d max_prime=%lu chunk_size=%lu\n",
    //                 numthr, max_prime, chunk_size);

d196 2
d215 1
@


1.9
log
@Added do print, and blocking version works.
@
text
@d90 1
a90 2
struct thread_data {
    int     thread_num;
d95 1
d99 24
d145 3
a147 1
    struct thread_data* data = (struct thread_data*)v;
d149 21
a169 20
    u_val_t curr_prime = 1;
    while ( (curr_prime=next_prime(curr_prime)) != 0) {

        // Find multiple of "curr_prime" within this thread's range
        u_val_t lo  = (data->low_bound/curr_prime) * curr_prime;
        if (lo < data->low_bound)   // make sure we're within the legal range
            lo += curr_prime;
        if ((lo & 0x01) == 0)       // make sure we're starting on an odd value
            lo += curr_prime;
        u_val_t incr = curr_prime + curr_prime;

        if (lo == curr_prime)       // only mark multiples - not the original
            lo += incr;
        while (lo < data->high_bound) {
            u_val_t byte_index = byte_pos(lo);
            assert(bit_pos(lo) < 8);
            bitmask[byte_index] |= (1 << bit_pos(lo));
           // fprintf(stderr, "thr=%d prime = %4lu, cross out %lu, byte_index = %lu  bit_index = %d  bit_mask = 0x%02x  byte_value = 0x%02x\n",
           // data->thread_num, curr_prime, lo, byte_index, bit_pos(lo), 1<<bit_pos(lo), (ubyte_t)bitmask[byte_index]);
            lo += incr;
d177 18
a194 4
    
    int numthr   = argc>1 ? atoi(argv[1]) : 1;
    max_prime    = argc>2 ? strtoull(argv[2], NULL, 10) : 4294967295UL;
    bool doprint = argc<=3;//can compare if you choose to
a199 3
    if (numthr*16 > max_prime) //each thread must have more than one byte of the compressed bitmap
        fprintf(stderr, "Too many threads for given max\n"), exit(-1);

a208 1
    u_val_t thr_span = (((max_prime/numthr) + 0xF) & ~0xF); //might be a bug
a210 14
    // Create high/low values for each thread
    std::vector<thread_data> tdata(numthr);
    u_val_t lo=0, hi;
    for (int i=0; i<numthr; i++) {
        hi = lo + thr_span;
        if (i == numthr-1)
            hi = max_prime + 1;
        tdata[i].thread_num = i;
        tdata[i].low_bound = lo;
        tdata[i].high_bound = hi;
        //fprintf(stderr, "thr = %d  low=%lu high=%lu \n", i, lo, hi);
        lo = hi;
    }
        
d214 1
a214 1
        pthread_create(&tid[i], &attr, do_sieve, (void*)&tdata[i]);
d218 1
a218 1
    fprintf(stderr, "Time to create bitmap = %lu seconds\n", (u_val_t)stop-(u_val_t)start);
@


1.8
log
@Added doprint in command line args
@
text
@d1 20
d23 1
d25 2
d29 15
a43 17
static const long SIZE = 1000000000;
//static const long SIZE = 4L*1024L*1024L*1024L;
char primes[((SIZE/2)+1)];
long curr_prime=1;
long limit;
pthread_mutex_t lock = {0};
 

//This will return the next prime        
long get_prime(){
    pthread_mutex_lock(&lock);
    if (curr_prime >= limit)
        return -1;    
    curr_prime +=2;
    long return_val = curr_prime;
    pthread_mutex_unlock(&lock); 
    return return_val;
d46 33
a78 6
void *sieve(void* v){
    long i;
    while ( (i=get_prime()) != -1){ 
        long incr = i+i; 
        for (long j=incr+i; j<SIZE; j+=incr){ 
            primes[((j+1)/2)]=1; //Getting rid of all evens 
d81 28
a108 1
    return 0; 
d111 5
a115 3
int main(int argc, char *argv[]) {
    
    limit = sqrt(SIZE)+1;
d117 30
a146 2
    int tid_size = (argc> 1)? atoi(argv[1]) : 1; 
    bool doprint = (argc> 2);
d148 2
a149 4
    pthread_t tid[tid_size]; 
    for (int i=0; i<tid_size; ++i){
        pthread_create(&tid[i], NULL, sieve, NULL);
    }   
d151 45
a195 3
    for (int i=0; i<tid_size; ++i){
        pthread_join(tid[i], NULL);  
    } 
d197 1
d200 3
a202 6
        int count = 0;
        for (int k=SIZE-1; k>3 && count<10; --k) {
            if ((primes[((k+1)/2)] == 0) && (k&0x1 ==1)) {  
                printf("%d ", k);
                count++;
            }   
a203 1
        printf("\n");
@


1.7
log
@Added comments, works.
@
text
@d37 1
d41 2
a50 6
/*
USE pthread_equal(id1, id2);
AND TO COMPILE:
     _pthread -rt
DON'T USE CALLOC
*/
d52 8
a59 4
    int count=0;
    for (int k=0; k<7920; ++k){
        if ((primes[((k+1)/2)] == 0) && (k&0x1 ==1)) {  
            printf("%d \t",k);
d61 1
a62 8
/*    for (int k=SIZE-1; k>3 && count<10; --k) {
        if ((primes[((k+1)/2)] == 0) && (k&0x1 ==1)) {  
            printf("%d ", k);
            count++;
        }   
    }
*/
    printf("\n");
@


1.6
log
@Working with threads, and mutex locks.
@
text
@d41 1
a41 1
    for (int i=0; i<tid_size; i++){
d45 1
a45 1
    for (int i=0; i<tid_size; i++){
d48 6
d56 6
a61 1
    for (int k=SIZE-1; k>3 && count<10; k--) {
d67 1
a67 1

@


1.5
log
@Abstracted the nested loops to methods; threading next.
@
text
@d4 1
d7 1
d11 2
d16 1
d20 3
a22 1
    return curr_prime;
a32 1

a35 1

d38 10
a47 1
    sieve(0);
@


1.4
log
@Added a double increment to the for loops
@
text
@d5 4
a8 2
static const int SIZE = 1000000000;
char primes[SIZE];
d10 7
a16 2
int main(int argc, char *argv[]) {
    int sq = sqrt(SIZE)+1;
d18 6
a23 6
    // The outer loop = 0 -> sqrt 
    for (int i=2; i<sq; i++){
        int incr = i+i;
        // Set all the nonprime bytes to 1 
        for (int j=incr+i; j<SIZE; j+=incr){ 
            primes[j]=1;
d26 9
d37 1
a37 1
        if (primes[k] == 0){ 
d42 1
@


1.3
log
@Now prints highest 10 primes.
@
text
@d5 1
a5 1
static const int SIZE = 100;
d11 1
a11 1
    /*The outer loop = 0 -> sq */
d13 3
a15 1
        for (int j=2*i; j<SIZE; j+=i){ 
@


1.2
log
@Functional finding primes version.
@
text
@d11 1
d17 6
a22 4

    for (int k=0; k<SIZE; k++){
        if (primes[k] == 0) 
            printf("%d ", k);   
@


1.1
log
@Initial revision
@
text
@d6 1
d8 7
a14 8
int main(int argc, char *argv[]){
    int i;
    int sq = sqrt(SIZE);
    for(i=0; i<SIZE; i++){
        for(int n = 0; n< sq; n++){
            if(i%n != 0)
                printf("%d",i); 
        } 
d17 5
@
