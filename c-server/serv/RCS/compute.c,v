head	1.2;
access;
symbols;
locks
	ryleyherrington:1.2; strict;
comment	@ * @;


1.2
date	2012.03.12.18.32.01;	author ryleyherrington;	state Exp;
branches;
next	1.1;

1.1
date	2012.03.12.03.03.07;	author ryleyherrington;	state Exp;
branches;
next	;


desc
@initial
@


1.2
log
@About to change to add another port
@
text
@
#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <string.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h> 
#include <vector> 
#include <string>
#include <sys/utsname.h>
#include <pthread.h>
#include <signal.h>
#include <time.h>

/* 
 * handle_signals
 *
 * Currently this does not attempt anything
 * resembling a "graceful" shutdown.
 */
void handle_signals(int sig)
{
    switch (sig) {
       case SIGHUP : fprintf(stderr, "Received SIGHUP  ... exiting\n");        break;
       case SIGINT : fprintf(stderr, "Received SIGINT  ... exiting\n");        break;
       case SIGQUIT: fprintf(stderr, "Received SIGQUIT ... exiting\n");        break;
       default     : fprintf(stderr, "Received signal %d ... exiting\n", sig); break;
    }
    exit(0);
}

/*
 * register_signal_handlers: register handlers for HUP, INTR, QUIT 
 */
void register_signal_handlers()
{
    struct sigaction act;
    memset(&act, 0, sizeof(act));
    act.sa_handler = handle_signals;
    act.sa_flags   = SA_RESTART;
    sigemptyset (&act.sa_mask);
    sigaction(SIGHUP,  &act, 0);
    sigaction(SIGINT,  &act, 0);
    sigaction(SIGQUIT, &act, 0);
}

/*
 * error_and_exit: Report error message and exit process
 */
void error_and_exit(const char *msg)
{
    perror(msg);
    exit(0);
}

/*
 * connect_to_server: connect to the advertised port on the "manage" server
 */
int connect_to_server(char* server_name, int port_num)
{
    // look up the server we will connect to
    struct hostent *server = gethostbyname(server_name);
    if (server == NULL) {
        fprintf(stderr,"ERROR: Could not find server '%s' ... exiting\n", server_name);
        exit(0);
    }

    // Create the socket
    int sockfd = socket(AF_INET, SOCK_STREAM, 0);
    if (sockfd < 0) 
        error_and_exit("ERROR: Unable to open socket");

    struct sockaddr_in serv_addr;
    memset(&serv_addr, 0, sizeof(serv_addr));
    serv_addr.sin_family = AF_INET;
    memcpy(&serv_addr.sin_addr.s_addr, server->h_addr, server->h_length);
    serv_addr.sin_port = htons(port_num);
    if (connect(sockfd,(struct sockaddr *) &serv_addr,sizeof(serv_addr)) < 0) 
        error_and_exit("ERROR: Unable to connect to server");

    return sockfd;
}

/*
 * send_command_to_server : write the provided command string to the "manage" server
 */
int
send_command_to_server(char *server_name, int port_num, const char *command)
{
    fprintf(stderr, "send_command_to_server: %s", command);     // debug
    int server_fd = connect_to_server(server_name, port_num);
    if (write(server_fd, command, strlen(command)) < 0)
        error_and_exit("Compute client could not write to manager server");
    return server_fd;
}

/*
 * clean_up_previous_connection
 *
 * Close any existing socket to the server and clean up the thread which had been monitoring that socket
 */
void
clean_up_previous_connection(int fd, pthread_t t)
{
    fprintf(stderr, "clean_up_previous_connection: fd = %d\n", fd);  // debug
    if (fd != -1)
        close(fd);

#if 0 // something is broken here ...
    if (t)
        pthread_join(t, 0);
        // pthread_kill(t);  ????
#endif
}


/*
 * compute_perfect_numbers: Use brute force analysis of all numbers within given range
 */
std::vector<long> compute_perfect_numbers(long low, long high)
{
    fprintf(stderr, "compute_perfect_numbers: low = %ld high = %ld\n", low, high);  // debug
    std::vector<long> perf_nums;
    for (long candidate = low; candidate<high; candidate++) {
        long sum = 0;
        for (long i=1; i<=candidate/2; i++) {
            if ((candidate % i) == 0) {
                sum += i;
            }
        }
        if (sum == candidate)
            perf_nums.push_back(candidate);
    }
    if (perf_nums.size() != 0)                                          // debug
        fprintf(stderr, "compute_perfect_numbers: "                     // debug
                "found %ld perfect numbers\n", (long)perf_nums.size()); // debug
    return perf_nums;
}

/*
 * compute_OPS : compute operations per second for this machine
 *
 * We could measure the system we're on using IOPS or FLOPS, 
 * but it seems more practical to measure it based on the 
 * operation that we'll be performing.  Thus, our measured
 * "operation" will be a "value checked as a factor" (which
 * is probably dominated by the time for a "%" operation).
 *
 * Since we're insisting on the 'brute force" approach, when
 * testing if N is perfect, we at least conceptually test each
 * of the (approximately) N values below it to see if they 
 * are a factor.  It doesn't matter that we might explicitly
 * only test half of them, we're still determining if any of 
 * the (approximately) N values less than N are factors.
 *
 * Since it takes N operations to determine if N is perfect,
 * then it will take N*(N+1)/2 operations to search all of
 * the numbers up to and including N.  To simplify things,
 * let's approximate that as N^2/2.
 *
 * This means that to search a range from L to H, we would
 * perform approximately H^2/2 - L^2/2 operations.  If we
 * perform this calculation and measure it, we can divide by
 * the time to produce an "operations per second" metric.
 *
 * The server can then use this metric to determine the
 * appropriate size of range to pass to this calculation
 * client (in order to keep the calculation in the 15 second
 * range).
 *
 * Given:
 *    OPS = operations/second (provided by "compute" client)
 *    L   = low bound (lowest unsearch value)
 *
 * Find:
 *    H   = high bound of range to give to "compute" client
 *
 * Solve for "H":
 *    (H^2 - L^2) / 2 = ( 15 * OPS)
 *    H^2 - L^2 = 2 ( 15 * OPS)
 *    H^2 = L^2 + 2 * (15 * OPS)
 *    H = sqrt(L^2 + 2 * (15 * OPS))
 *
 * So, when the server is assigning a new range, it should use
 * the smallest unassigned value for the low bound and use the
 * previous formula to determine the upper bound.
 */
double
compute_OPS()
{
    long delta_seconds = 1;
    long delta = 5000;
    long lower = 1;
    do {
        // ramp up the upper bound to find at least a 5 second calculation
        // This could be done much more quickly if we used a finer resolution timer
        delta *= 2;
        time_t start = time(0);
        (void)compute_perfect_numbers(lower, lower+delta);
        time_t end = time(0);
        delta_seconds = ((long)(end - start));
        fprintf(stderr, "compute_OPS: range of %ld .. %ld took %ld seconds\n", lower, lower+delta, delta_seconds);  // debug
    } while (delta_seconds < 5);

    double OPS = ((double)delta * (double)delta) / (2.0 * (double)delta_seconds);

    // return operations per second
    return OPS;
}

/*
 * construct_I_command : Create the initialization command for registering a new compute client
 * 
 * This command will be composed of:
 *   -- The command character "I"
 *   -- The name of the system running the compute client
 *   -- The process id of the compute client
 *   -- The value of the computed operations per second
 * 
 * For example, it might look like: 
 *
 *      I mymachine 12345 1000000.0
 *
 * Because all data is in string form, byte ordering is not an issue.
 */
std::string
construct_I_command()
{
    struct utsname uname_buff;
    if (uname(&uname_buff) < 0)
        error_and_exit("Compute client could not find host name");
    char command_buffer[1024];
    sprintf(command_buffer, "I %s %ld %f\n", uname_buff.nodename, (long)getpid(), compute_OPS());
    std::string command(command_buffer);
    fprintf(stderr, "construct_I_command: %s", command.c_str());  // debug
    return command;
}

/*
 * construct_P_command : Create the command to report computed perfect numbers
 *   -- The command character "P"
 *   -- Each of the perfect numbers found within the given range
 *
 * For example, it might look like:
 *
 *      P 6 28 496
 */
std::string
construct_P_command(std::vector<long> number_vec)
{
    std::string command("P ");

    char numbuff[100];
    for (int i=0; i<number_vec.size(); i++) {
        sprintf(numbuff, "%ld ", number_vec[i]);
        command += numbuff;
    }
    command += "\n";

    fprintf(stderr, "construct_P_command: %s", command.c_str());  // debug
    return command;
}

/*
 *  watch_for_kill_command: monitor the server socket waiting for a "K" command
 *
 *  This thread will immediately try to read from the server socket.
 *
 *  If the "read" returns and the command is "K", then this client should exit.
 *
 *  If the "read" errors out, that means this client finished its calculation
 *  and the server closed this connection.  The correct behavior is for the
 *  thread to exit (and be joined by the main thread).
 *
 *  Rather than exiting by simply calling "exit", the instructions say for
 *  the process to send itself a INTR signal, which will be caught and the
 *  handler will call exit().
 */
void*
watch_for_kill_command(void* p)
{
    // Variable shuffling to pacify the compiler
    intptr_t ifd = (intptr_t)p;
    int fd = ifd;

    char buff[10];
#if 1
    if (read(fd, buff, 1) > 0) {  // if I read *anything*, I know it's a KILL
        fprintf(stderr, "watch_for_kill_command: detected 'K' command, replying with 'Q'\n"); // debug
        write(fd, "Q", 1);       // I can write anything to signify I got the KILL
        fprintf(stderr, "watch_for_kill_command: wrote the 'Q', sending SIGINT\n"); // debug
        kill(getpid(), SIGINT);
        exit(0);
    }
#else
    if (read(fd, buff, 1) > 0) {
        if (buff[0] == 'K') {
            fprintf(stderr, "watch_for_kill_command: detected 'K' command, sending SIGINT\n"); // debug
            kill(getpid(), SIGINT);

            // Should never get here ...
            fprintf(stderr, "watch_for_kill_command: kill() failed ... exiting\n"); // debug
            exit(0);
        }
        else {
            fprintf(stderr, "watch_for_kill_command: Unexpected command: '%c' ... exiting\n", *buff);
            exit(0);
        }
    }
#endif

    // If we reached this point, it means the socket
    // connection was dropped and we should just return.
    return 0;
}

int main(int argc, char *argv[])
{
    // if (argc < 3) {
    //    fprintf(stderr,"usage %s hostname port\n", argv[0]);
    //    exit(0);
    // }
    char *server_name = argc>1 ? argv[1]       : (char*)"localhost";
    long server_port  = argc>2 ? atol(argv[2]) : 2245;

    // Prepare process to handle SIGINT, SIGHUP, SIGQUIT
    register_signal_handlers();

    // Register this compute client with an "I" command
    std::string command = construct_I_command();
    int server_fd = send_command_to_server(server_name, server_port, command.c_str());

    // Continue computing perfect numbers until told to quit
    while (1) {

        // Read the low value and high value of the range of numbers to check
        char *p, reply_buffer[1024] = { 0 };
        if (read(server_fd, reply_buffer, sizeof(reply_buffer)) < 0)
            error_and_exit("Compute client could not read from manager server");
        fprintf(stderr, "main: read range from server: '%s'\n", reply_buffer);      // debug
        // long low = strtol(reply_buffer, &p, 10);
        // long high = strtol(p, 0, 10);
        float float_low, float_high;
        sscanf(reply_buffer, "%f %f", &float_low, &float_high);
        long low = float_low;
        long high = float_high;
        fprintf(stderr, "main: low = %ld high = %ld\n", low, high);              // debug
    
        // spin off a thread to listen for a KILL command
        pthread_t thr;
        pthread_create(&thr, 0, watch_for_kill_command, (void*)server_fd);

        // compute the perfect numbers in the range we were told
        // This should take approximately 15 seconds.
        std::vector<long> number_vec = compute_perfect_numbers(low, high);

        // Send any discovered perfect numbers to server and ask for new range
        command = construct_P_command(number_vec);
        clean_up_previous_connection(server_fd, thr);
        server_fd = send_command_to_server(server_name, server_port, command.c_str());
    }
    return 0;
}
@


1.1
log
@Initial revision
@
text
@d120 1
a120 1
 * compute_pefect_numbers: Use brute force analysis of all numbers within given range
a243 1
 *   -- The number of perfect numbers being returned
d248 1
a248 1
 *      P 3 6 28 496
a255 2
    sprintf(numbuff, "%ld ", (long)number_vec.size());
    command += numbuff;
d289 9
d308 1
a308 1
            fprintf(stderr, "Unexpected command ... exiting\n");
d312 1
d339 1
a339 1
        char reply_buffer[1024];
d342 8
a349 2
        long low, high;
        sscanf(reply_buffer, "%ld %ld\n", &low, &high);
@
